/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter add_pb_suffix,eslint_disable,ts_nocheck,use_proto_field_name
// @generated from protobuf file "report.proto" (package "objdiff.report", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * Progress info for a report or unit
 *
 * @generated from protobuf message objdiff.report.Measures
 */
export interface Measures {
  /**
   * Overall match percent, including partially matched functions and data
   *
   * @generated from protobuf field: float fuzzy_match_percent = 1;
   */
  fuzzy_match_percent: number;
  /**
   * Total size of code in bytes
   *
   * @generated from protobuf field: uint64 total_code = 2;
   */
  total_code: bigint;
  /**
   * Fully matched code size in bytes
   *
   * @generated from protobuf field: uint64 matched_code = 3;
   */
  matched_code: bigint;
  /**
   * Fully matched code percent
   *
   * @generated from protobuf field: float matched_code_percent = 4;
   */
  matched_code_percent: number;
  /**
   * Total size of data in bytes
   *
   * @generated from protobuf field: uint64 total_data = 5;
   */
  total_data: bigint;
  /**
   * Fully matched data size in bytes
   *
   * @generated from protobuf field: uint64 matched_data = 6;
   */
  matched_data: bigint;
  /**
   * Fully matched data percent
   *
   * @generated from protobuf field: float matched_data_percent = 7;
   */
  matched_data_percent: number;
  /**
   * Total number of functions
   *
   * @generated from protobuf field: uint32 total_functions = 8;
   */
  total_functions: number;
  /**
   * Fully matched functions
   *
   * @generated from protobuf field: uint32 matched_functions = 9;
   */
  matched_functions: number;
  /**
   * Fully matched functions percent
   *
   * @generated from protobuf field: float matched_functions_percent = 10;
   */
  matched_functions_percent: number;
  /**
   * Completed (or "linked") code size in bytes
   *
   * @generated from protobuf field: uint64 complete_code = 11;
   */
  complete_code: bigint;
  /**
   * Completed (or "linked") code percent
   *
   * @generated from protobuf field: float complete_code_percent = 12;
   */
  complete_code_percent: number;
  /**
   * Completed (or "linked") data size in bytes
   *
   * @generated from protobuf field: uint64 complete_data = 13;
   */
  complete_data: bigint;
  /**
   * Completed (or "linked") data percent
   *
   * @generated from protobuf field: float complete_data_percent = 14;
   */
  complete_data_percent: number;
  /**
   * Total number of units
   *
   * @generated from protobuf field: uint32 total_units = 15;
   */
  total_units: number;
  /**
   * Completed (or "linked") units
   *
   * @generated from protobuf field: uint32 complete_units = 16;
   */
  complete_units: number;
}
/**
 * Project progress report
 *
 * @generated from protobuf message objdiff.report.Report
 */
export interface Report {
  /**
   * Overall progress info
   *
   * @generated from protobuf field: objdiff.report.Measures measures = 1;
   */
  measures?: Measures;
  /**
   * Units within this report
   *
   * @generated from protobuf field: repeated objdiff.report.ReportUnit units = 2;
   */
  units: ReportUnit[];
  /**
   * Report version
   *
   * @generated from protobuf field: uint32 version = 3;
   */
  version: number;
  /**
   * Progress categories
   *
   * @generated from protobuf field: repeated objdiff.report.ReportCategory categories = 4;
   */
  categories: ReportCategory[];
}
/**
 * @generated from protobuf message objdiff.report.ReportCategory
 */
export interface ReportCategory {
  /**
   * The ID of the category
   *
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * The name of the category
   *
   * @generated from protobuf field: string name = 2;
   */
  name: string;
  /**
   * Progress info for this category
   *
   * @generated from protobuf field: objdiff.report.Measures measures = 3;
   */
  measures?: Measures;
}
/**
 * A unit of the report (usually a translation unit)
 *
 * @generated from protobuf message objdiff.report.ReportUnit
 */
export interface ReportUnit {
  /**
   * The name of the unit
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * Progress info for this unit
   *
   * @generated from protobuf field: objdiff.report.Measures measures = 2;
   */
  measures?: Measures;
  /**
   * Sections within this unit
   *
   * @generated from protobuf field: repeated objdiff.report.ReportItem sections = 3;
   */
  sections: ReportItem[];
  /**
   * Functions within this unit
   *
   * @generated from protobuf field: repeated objdiff.report.ReportItem functions = 4;
   */
  functions: ReportItem[];
  /**
   * Extra metadata for this unit
   *
   * @generated from protobuf field: optional objdiff.report.ReportUnitMetadata metadata = 5;
   */
  metadata?: ReportUnitMetadata;
}
/**
 * Extra metadata for a unit
 *
 * @generated from protobuf message objdiff.report.ReportUnitMetadata
 */
export interface ReportUnitMetadata {
  /**
   * Whether this unit is marked as complete (or "linked")
   *
   * @generated from protobuf field: optional bool complete = 1;
   */
  complete?: boolean;
  /**
   * The name of the module this unit belongs to
   *
   * @generated from protobuf field: optional string module_name = 2;
   */
  module_name?: string;
  /**
   * The ID of the module this unit belongs to
   *
   * @generated from protobuf field: optional uint32 module_id = 3;
   */
  module_id?: number;
  /**
   * The path to the source file of this unit
   *
   * @generated from protobuf field: optional string source_path = 4;
   */
  source_path?: string;
  /**
   * Progress categories for this unit
   *
   * @generated from protobuf field: repeated string progress_categories = 5;
   */
  progress_categories: string[];
  /**
   * Whether this unit is automatically generated (not user-provided)
   *
   * @generated from protobuf field: optional bool auto_generated = 6;
   */
  auto_generated?: boolean;
}
/**
 * A section or function within a unit
 *
 * @generated from protobuf message objdiff.report.ReportItem
 */
export interface ReportItem {
  /**
   * The name of the item
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * The size of the item in bytes
   *
   * @generated from protobuf field: uint64 size = 2;
   */
  size: bigint;
  /**
   * The overall match percent for this item
   *
   * @generated from protobuf field: float fuzzy_match_percent = 3;
   */
  fuzzy_match_percent: number;
  /**
   * Extra metadata for this item
   *
   * @generated from protobuf field: optional objdiff.report.ReportItemMetadata metadata = 4;
   */
  metadata?: ReportItemMetadata;
}
/**
 * Extra metadata for an item
 *
 * @generated from protobuf message objdiff.report.ReportItemMetadata
 */
export interface ReportItemMetadata {
  /**
   * The demangled name of the function
   *
   * @generated from protobuf field: optional string demangled_name = 1;
   */
  demangled_name?: string;
  /**
   * The virtual address of the function or section
   *
   * @generated from protobuf field: optional uint64 virtual_address = 2;
   */
  virtual_address?: bigint;
}
/**
 * A pair of reports to compare and generate changes
 *
 * @generated from protobuf message objdiff.report.ChangesInput
 */
export interface ChangesInput {
  /**
   * The previous report
   *
   * @generated from protobuf field: objdiff.report.Report from = 1;
   */
  from?: Report;
  /**
   * The current report
   *
   * @generated from protobuf field: objdiff.report.Report to = 2;
   */
  to?: Report;
}
/**
 * Changes between two reports
 *
 * @generated from protobuf message objdiff.report.Changes
 */
export interface Changes {
  /**
   * The progress info for the previous report
   *
   * @generated from protobuf field: objdiff.report.Measures from = 1;
   */
  from?: Measures;
  /**
   * The progress info for the current report
   *
   * @generated from protobuf field: objdiff.report.Measures to = 2;
   */
  to?: Measures;
  /**
   * Units that changed
   *
   * @generated from protobuf field: repeated objdiff.report.ChangeUnit units = 3;
   */
  units: ChangeUnit[];
}
/**
 * A changed unit
 *
 * @generated from protobuf message objdiff.report.ChangeUnit
 */
export interface ChangeUnit {
  /**
   * The name of the unit
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * The previous progress info (omitted if new)
   *
   * @generated from protobuf field: optional objdiff.report.Measures from = 2;
   */
  from?: Measures;
  /**
   * The current progress info (omitted if removed)
   *
   * @generated from protobuf field: optional objdiff.report.Measures to = 3;
   */
  to?: Measures;
  /**
   * Sections that changed
   *
   * @generated from protobuf field: repeated objdiff.report.ChangeItem sections = 4;
   */
  sections: ChangeItem[];
  /**
   * Functions that changed
   *
   * @generated from protobuf field: repeated objdiff.report.ChangeItem functions = 5;
   */
  functions: ChangeItem[];
  /**
   * Extra metadata for this unit
   *
   * @generated from protobuf field: optional objdiff.report.ReportUnitMetadata metadata = 6;
   */
  metadata?: ReportUnitMetadata;
}
/**
 * A changed section or function
 *
 * @generated from protobuf message objdiff.report.ChangeItem
 */
export interface ChangeItem {
  /**
   * The name of the item
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * The previous progress info (omitted if new)
   *
   * @generated from protobuf field: optional objdiff.report.ChangeItemInfo from = 2;
   */
  from?: ChangeItemInfo;
  /**
   * The current progress info (omitted if removed)
   *
   * @generated from protobuf field: optional objdiff.report.ChangeItemInfo to = 3;
   */
  to?: ChangeItemInfo;
  /**
   * Extra metadata for this item
   *
   * @generated from protobuf field: optional objdiff.report.ReportItemMetadata metadata = 4;
   */
  metadata?: ReportItemMetadata;
}
/**
 * Progress info for a section or function
 *
 * @generated from protobuf message objdiff.report.ChangeItemInfo
 */
export interface ChangeItemInfo {
  /**
   * The overall match percent for this item
   *
   * @generated from protobuf field: float fuzzy_match_percent = 1;
   */
  fuzzy_match_percent: number;
  /**
   * The size of the item in bytes
   *
   * @generated from protobuf field: uint64 size = 2;
   */
  size: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Measures$Type extends MessageType<Measures> {
  constructor() {
    super('objdiff.report.Measures', [
      {
        no: 1,
        name: 'fuzzy_match_percent',
        kind: 'scalar',
        localName: 'fuzzy_match_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: 'total_code',
        kind: 'scalar',
        localName: 'total_code',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: 'matched_code',
        kind: 'scalar',
        localName: 'matched_code',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: 'matched_code_percent',
        kind: 'scalar',
        localName: 'matched_code_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: 'total_data',
        kind: 'scalar',
        localName: 'total_data',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 6,
        name: 'matched_data',
        kind: 'scalar',
        localName: 'matched_data',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 7,
        name: 'matched_data_percent',
        kind: 'scalar',
        localName: 'matched_data_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 8,
        name: 'total_functions',
        kind: 'scalar',
        localName: 'total_functions',
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: 'matched_functions',
        kind: 'scalar',
        localName: 'matched_functions',
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: 'matched_functions_percent',
        kind: 'scalar',
        localName: 'matched_functions_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 11,
        name: 'complete_code',
        kind: 'scalar',
        localName: 'complete_code',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 12,
        name: 'complete_code_percent',
        kind: 'scalar',
        localName: 'complete_code_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 13,
        name: 'complete_data',
        kind: 'scalar',
        localName: 'complete_data',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 14,
        name: 'complete_data_percent',
        kind: 'scalar',
        localName: 'complete_data_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 15,
        name: 'total_units',
        kind: 'scalar',
        localName: 'total_units',
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: 'complete_units',
        kind: 'scalar',
        localName: 'complete_units',
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<Measures>): Measures {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.fuzzy_match_percent = 0;
    message.total_code = 0n;
    message.matched_code = 0n;
    message.matched_code_percent = 0;
    message.total_data = 0n;
    message.matched_data = 0n;
    message.matched_data_percent = 0;
    message.total_functions = 0;
    message.matched_functions = 0;
    message.matched_functions_percent = 0;
    message.complete_code = 0n;
    message.complete_code_percent = 0;
    message.complete_data = 0n;
    message.complete_data_percent = 0;
    message.total_units = 0;
    message.complete_units = 0;
    if (value !== undefined)
      reflectionMergePartial<Measures>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Measures,
  ): Measures {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* float fuzzy_match_percent */ 1:
          message.fuzzy_match_percent = reader.float();
          break;
        case /* uint64 total_code */ 2:
          message.total_code = reader.uint64().toBigInt();
          break;
        case /* uint64 matched_code */ 3:
          message.matched_code = reader.uint64().toBigInt();
          break;
        case /* float matched_code_percent */ 4:
          message.matched_code_percent = reader.float();
          break;
        case /* uint64 total_data */ 5:
          message.total_data = reader.uint64().toBigInt();
          break;
        case /* uint64 matched_data */ 6:
          message.matched_data = reader.uint64().toBigInt();
          break;
        case /* float matched_data_percent */ 7:
          message.matched_data_percent = reader.float();
          break;
        case /* uint32 total_functions */ 8:
          message.total_functions = reader.uint32();
          break;
        case /* uint32 matched_functions */ 9:
          message.matched_functions = reader.uint32();
          break;
        case /* float matched_functions_percent */ 10:
          message.matched_functions_percent = reader.float();
          break;
        case /* uint64 complete_code */ 11:
          message.complete_code = reader.uint64().toBigInt();
          break;
        case /* float complete_code_percent */ 12:
          message.complete_code_percent = reader.float();
          break;
        case /* uint64 complete_data */ 13:
          message.complete_data = reader.uint64().toBigInt();
          break;
        case /* float complete_data_percent */ 14:
          message.complete_data_percent = reader.float();
          break;
        case /* uint32 total_units */ 15:
          message.total_units = reader.uint32();
          break;
        case /* uint32 complete_units */ 16:
          message.complete_units = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Measures,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* float fuzzy_match_percent = 1; */
    if (message.fuzzy_match_percent !== 0)
      writer.tag(1, WireType.Bit32).float(message.fuzzy_match_percent);
    /* uint64 total_code = 2; */
    if (message.total_code !== 0n)
      writer.tag(2, WireType.Varint).uint64(message.total_code);
    /* uint64 matched_code = 3; */
    if (message.matched_code !== 0n)
      writer.tag(3, WireType.Varint).uint64(message.matched_code);
    /* float matched_code_percent = 4; */
    if (message.matched_code_percent !== 0)
      writer.tag(4, WireType.Bit32).float(message.matched_code_percent);
    /* uint64 total_data = 5; */
    if (message.total_data !== 0n)
      writer.tag(5, WireType.Varint).uint64(message.total_data);
    /* uint64 matched_data = 6; */
    if (message.matched_data !== 0n)
      writer.tag(6, WireType.Varint).uint64(message.matched_data);
    /* float matched_data_percent = 7; */
    if (message.matched_data_percent !== 0)
      writer.tag(7, WireType.Bit32).float(message.matched_data_percent);
    /* uint32 total_functions = 8; */
    if (message.total_functions !== 0)
      writer.tag(8, WireType.Varint).uint32(message.total_functions);
    /* uint32 matched_functions = 9; */
    if (message.matched_functions !== 0)
      writer.tag(9, WireType.Varint).uint32(message.matched_functions);
    /* float matched_functions_percent = 10; */
    if (message.matched_functions_percent !== 0)
      writer.tag(10, WireType.Bit32).float(message.matched_functions_percent);
    /* uint64 complete_code = 11; */
    if (message.complete_code !== 0n)
      writer.tag(11, WireType.Varint).uint64(message.complete_code);
    /* float complete_code_percent = 12; */
    if (message.complete_code_percent !== 0)
      writer.tag(12, WireType.Bit32).float(message.complete_code_percent);
    /* uint64 complete_data = 13; */
    if (message.complete_data !== 0n)
      writer.tag(13, WireType.Varint).uint64(message.complete_data);
    /* float complete_data_percent = 14; */
    if (message.complete_data_percent !== 0)
      writer.tag(14, WireType.Bit32).float(message.complete_data_percent);
    /* uint32 total_units = 15; */
    if (message.total_units !== 0)
      writer.tag(15, WireType.Varint).uint32(message.total_units);
    /* uint32 complete_units = 16; */
    if (message.complete_units !== 0)
      writer.tag(16, WireType.Varint).uint32(message.complete_units);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.Measures
 */
export const Measures = new Measures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType<Report> {
  constructor() {
    super('objdiff.report.Report', [
      { no: 1, name: 'measures', kind: 'message', T: () => Measures },
      {
        no: 2,
        name: 'units',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReportUnit,
      },
      { no: 3, name: 'version', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      {
        no: 4,
        name: 'categories',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReportCategory,
      },
    ]);
  }
  create(value?: PartialMessage<Report>): Report {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.units = [];
    message.version = 0;
    message.categories = [];
    if (value !== undefined)
      reflectionMergePartial<Report>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Report,
  ): Report {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* objdiff.report.Measures measures */ 1:
          message.measures = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.measures,
          );
          break;
        case /* repeated objdiff.report.ReportUnit units */ 2:
          message.units.push(
            ReportUnit.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* uint32 version */ 3:
          message.version = reader.uint32();
          break;
        case /* repeated objdiff.report.ReportCategory categories */ 4:
          message.categories.push(
            ReportCategory.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Report,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* objdiff.report.Measures measures = 1; */
    if (message.measures)
      Measures.internalBinaryWrite(
        message.measures,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ReportUnit units = 2; */
    for (let i = 0; i < message.units.length; i++)
      ReportUnit.internalBinaryWrite(
        message.units[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* uint32 version = 3; */
    if (message.version !== 0)
      writer.tag(3, WireType.Varint).uint32(message.version);
    /* repeated objdiff.report.ReportCategory categories = 4; */
    for (let i = 0; i < message.categories.length; i++)
      ReportCategory.internalBinaryWrite(
        message.categories[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCategory$Type extends MessageType<ReportCategory> {
  constructor() {
    super('objdiff.report.ReportCategory', [
      { no: 1, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'measures', kind: 'message', T: () => Measures },
    ]);
  }
  create(value?: PartialMessage<ReportCategory>): ReportCategory {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.id = '';
    message.name = '';
    if (value !== undefined)
      reflectionMergePartial<ReportCategory>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReportCategory,
  ): ReportCategory {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string name */ 2:
          message.name = reader.string();
          break;
        case /* objdiff.report.Measures measures */ 3:
          message.measures = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.measures,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReportCategory,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string name = 2; */
    if (message.name !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* objdiff.report.Measures measures = 3; */
    if (message.measures)
      Measures.internalBinaryWrite(
        message.measures,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ReportCategory
 */
export const ReportCategory = new ReportCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportUnit$Type extends MessageType<ReportUnit> {
  constructor() {
    super('objdiff.report.ReportUnit', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'measures', kind: 'message', T: () => Measures },
      {
        no: 3,
        name: 'sections',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReportItem,
      },
      {
        no: 4,
        name: 'functions',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReportItem,
      },
      { no: 5, name: 'metadata', kind: 'message', T: () => ReportUnitMetadata },
    ]);
  }
  create(value?: PartialMessage<ReportUnit>): ReportUnit {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    message.sections = [];
    message.functions = [];
    if (value !== undefined)
      reflectionMergePartial<ReportUnit>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReportUnit,
  ): ReportUnit {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* objdiff.report.Measures measures */ 2:
          message.measures = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.measures,
          );
          break;
        case /* repeated objdiff.report.ReportItem sections */ 3:
          message.sections.push(
            ReportItem.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated objdiff.report.ReportItem functions */ 4:
          message.functions.push(
            ReportItem.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional objdiff.report.ReportUnitMetadata metadata */ 5:
          message.metadata = ReportUnitMetadata.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.metadata,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReportUnit,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* objdiff.report.Measures measures = 2; */
    if (message.measures)
      Measures.internalBinaryWrite(
        message.measures,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ReportItem sections = 3; */
    for (let i = 0; i < message.sections.length; i++)
      ReportItem.internalBinaryWrite(
        message.sections[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ReportItem functions = 4; */
    for (let i = 0; i < message.functions.length; i++)
      ReportItem.internalBinaryWrite(
        message.functions[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional objdiff.report.ReportUnitMetadata metadata = 5; */
    if (message.metadata)
      ReportUnitMetadata.internalBinaryWrite(
        message.metadata,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ReportUnit
 */
export const ReportUnit = new ReportUnit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportUnitMetadata$Type extends MessageType<ReportUnitMetadata> {
  constructor() {
    super('objdiff.report.ReportUnitMetadata', [
      {
        no: 1,
        name: 'complete',
        kind: 'scalar',
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: 'module_name',
        kind: 'scalar',
        localName: 'module_name',
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: 'module_id',
        kind: 'scalar',
        localName: 'module_id',
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: 'source_path',
        kind: 'scalar',
        localName: 'source_path',
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: 'progress_categories',
        kind: 'scalar',
        localName: 'progress_categories',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: 'auto_generated',
        kind: 'scalar',
        localName: 'auto_generated',
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<ReportUnitMetadata>): ReportUnitMetadata {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.progress_categories = [];
    if (value !== undefined)
      reflectionMergePartial<ReportUnitMetadata>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReportUnitMetadata,
  ): ReportUnitMetadata {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool complete */ 1:
          message.complete = reader.bool();
          break;
        case /* optional string module_name */ 2:
          message.module_name = reader.string();
          break;
        case /* optional uint32 module_id */ 3:
          message.module_id = reader.uint32();
          break;
        case /* optional string source_path */ 4:
          message.source_path = reader.string();
          break;
        case /* repeated string progress_categories */ 5:
          message.progress_categories.push(reader.string());
          break;
        case /* optional bool auto_generated */ 6:
          message.auto_generated = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReportUnitMetadata,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool complete = 1; */
    if (message.complete !== undefined)
      writer.tag(1, WireType.Varint).bool(message.complete);
    /* optional string module_name = 2; */
    if (message.module_name !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.module_name);
    /* optional uint32 module_id = 3; */
    if (message.module_id !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.module_id);
    /* optional string source_path = 4; */
    if (message.source_path !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.source_path);
    /* repeated string progress_categories = 5; */
    for (let i = 0; i < message.progress_categories.length; i++)
      writer
        .tag(5, WireType.LengthDelimited)
        .string(message.progress_categories[i]);
    /* optional bool auto_generated = 6; */
    if (message.auto_generated !== undefined)
      writer.tag(6, WireType.Varint).bool(message.auto_generated);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ReportUnitMetadata
 */
export const ReportUnitMetadata = new ReportUnitMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportItem$Type extends MessageType<ReportItem> {
  constructor() {
    super('objdiff.report.ReportItem', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'size',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: 'fuzzy_match_percent',
        kind: 'scalar',
        localName: 'fuzzy_match_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      { no: 4, name: 'metadata', kind: 'message', T: () => ReportItemMetadata },
    ]);
  }
  create(value?: PartialMessage<ReportItem>): ReportItem {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    message.size = 0n;
    message.fuzzy_match_percent = 0;
    if (value !== undefined)
      reflectionMergePartial<ReportItem>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReportItem,
  ): ReportItem {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* uint64 size */ 2:
          message.size = reader.uint64().toBigInt();
          break;
        case /* float fuzzy_match_percent */ 3:
          message.fuzzy_match_percent = reader.float();
          break;
        case /* optional objdiff.report.ReportItemMetadata metadata */ 4:
          message.metadata = ReportItemMetadata.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.metadata,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReportItem,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* uint64 size = 2; */
    if (message.size !== 0n)
      writer.tag(2, WireType.Varint).uint64(message.size);
    /* float fuzzy_match_percent = 3; */
    if (message.fuzzy_match_percent !== 0)
      writer.tag(3, WireType.Bit32).float(message.fuzzy_match_percent);
    /* optional objdiff.report.ReportItemMetadata metadata = 4; */
    if (message.metadata)
      ReportItemMetadata.internalBinaryWrite(
        message.metadata,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ReportItem
 */
export const ReportItem = new ReportItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportItemMetadata$Type extends MessageType<ReportItemMetadata> {
  constructor() {
    super('objdiff.report.ReportItemMetadata', [
      {
        no: 1,
        name: 'demangled_name',
        kind: 'scalar',
        localName: 'demangled_name',
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: 'virtual_address',
        kind: 'scalar',
        localName: 'virtual_address',
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<ReportItemMetadata>): ReportItemMetadata {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ReportItemMetadata>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReportItemMetadata,
  ): ReportItemMetadata {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string demangled_name */ 1:
          message.demangled_name = reader.string();
          break;
        case /* optional uint64 virtual_address */ 2:
          message.virtual_address = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReportItemMetadata,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string demangled_name = 1; */
    if (message.demangled_name !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.demangled_name);
    /* optional uint64 virtual_address = 2; */
    if (message.virtual_address !== undefined)
      writer.tag(2, WireType.Varint).uint64(message.virtual_address);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ReportItemMetadata
 */
export const ReportItemMetadata = new ReportItemMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangesInput$Type extends MessageType<ChangesInput> {
  constructor() {
    super('objdiff.report.ChangesInput', [
      { no: 1, name: 'from', kind: 'message', T: () => Report },
      { no: 2, name: 'to', kind: 'message', T: () => Report },
    ]);
  }
  create(value?: PartialMessage<ChangesInput>): ChangesInput {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ChangesInput>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangesInput,
  ): ChangesInput {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* objdiff.report.Report from */ 1:
          message.from = Report.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.from,
          );
          break;
        case /* objdiff.report.Report to */ 2:
          message.to = Report.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.to,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangesInput,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* objdiff.report.Report from = 1; */
    if (message.from)
      Report.internalBinaryWrite(
        message.from,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* objdiff.report.Report to = 2; */
    if (message.to)
      Report.internalBinaryWrite(
        message.to,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ChangesInput
 */
export const ChangesInput = new ChangesInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Changes$Type extends MessageType<Changes> {
  constructor() {
    super('objdiff.report.Changes', [
      { no: 1, name: 'from', kind: 'message', T: () => Measures },
      { no: 2, name: 'to', kind: 'message', T: () => Measures },
      {
        no: 3,
        name: 'units',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ChangeUnit,
      },
    ]);
  }
  create(value?: PartialMessage<Changes>): Changes {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.units = [];
    if (value !== undefined)
      reflectionMergePartial<Changes>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Changes,
  ): Changes {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* objdiff.report.Measures from */ 1:
          message.from = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.from,
          );
          break;
        case /* objdiff.report.Measures to */ 2:
          message.to = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.to,
          );
          break;
        case /* repeated objdiff.report.ChangeUnit units */ 3:
          message.units.push(
            ChangeUnit.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Changes,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* objdiff.report.Measures from = 1; */
    if (message.from)
      Measures.internalBinaryWrite(
        message.from,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* objdiff.report.Measures to = 2; */
    if (message.to)
      Measures.internalBinaryWrite(
        message.to,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ChangeUnit units = 3; */
    for (let i = 0; i < message.units.length; i++)
      ChangeUnit.internalBinaryWrite(
        message.units[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.Changes
 */
export const Changes = new Changes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeUnit$Type extends MessageType<ChangeUnit> {
  constructor() {
    super('objdiff.report.ChangeUnit', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'from', kind: 'message', T: () => Measures },
      { no: 3, name: 'to', kind: 'message', T: () => Measures },
      {
        no: 4,
        name: 'sections',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ChangeItem,
      },
      {
        no: 5,
        name: 'functions',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ChangeItem,
      },
      { no: 6, name: 'metadata', kind: 'message', T: () => ReportUnitMetadata },
    ]);
  }
  create(value?: PartialMessage<ChangeUnit>): ChangeUnit {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    message.sections = [];
    message.functions = [];
    if (value !== undefined)
      reflectionMergePartial<ChangeUnit>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangeUnit,
  ): ChangeUnit {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* optional objdiff.report.Measures from */ 2:
          message.from = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.from,
          );
          break;
        case /* optional objdiff.report.Measures to */ 3:
          message.to = Measures.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.to,
          );
          break;
        case /* repeated objdiff.report.ChangeItem sections */ 4:
          message.sections.push(
            ChangeItem.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated objdiff.report.ChangeItem functions */ 5:
          message.functions.push(
            ChangeItem.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional objdiff.report.ReportUnitMetadata metadata */ 6:
          message.metadata = ReportUnitMetadata.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.metadata,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangeUnit,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* optional objdiff.report.Measures from = 2; */
    if (message.from)
      Measures.internalBinaryWrite(
        message.from,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional objdiff.report.Measures to = 3; */
    if (message.to)
      Measures.internalBinaryWrite(
        message.to,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ChangeItem sections = 4; */
    for (let i = 0; i < message.sections.length; i++)
      ChangeItem.internalBinaryWrite(
        message.sections[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated objdiff.report.ChangeItem functions = 5; */
    for (let i = 0; i < message.functions.length; i++)
      ChangeItem.internalBinaryWrite(
        message.functions[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional objdiff.report.ReportUnitMetadata metadata = 6; */
    if (message.metadata)
      ReportUnitMetadata.internalBinaryWrite(
        message.metadata,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ChangeUnit
 */
export const ChangeUnit = new ChangeUnit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeItem$Type extends MessageType<ChangeItem> {
  constructor() {
    super('objdiff.report.ChangeItem', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'from', kind: 'message', T: () => ChangeItemInfo },
      { no: 3, name: 'to', kind: 'message', T: () => ChangeItemInfo },
      { no: 4, name: 'metadata', kind: 'message', T: () => ReportItemMetadata },
    ]);
  }
  create(value?: PartialMessage<ChangeItem>): ChangeItem {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    if (value !== undefined)
      reflectionMergePartial<ChangeItem>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangeItem,
  ): ChangeItem {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* optional objdiff.report.ChangeItemInfo from */ 2:
          message.from = ChangeItemInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.from,
          );
          break;
        case /* optional objdiff.report.ChangeItemInfo to */ 3:
          message.to = ChangeItemInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.to,
          );
          break;
        case /* optional objdiff.report.ReportItemMetadata metadata */ 4:
          message.metadata = ReportItemMetadata.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.metadata,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangeItem,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* optional objdiff.report.ChangeItemInfo from = 2; */
    if (message.from)
      ChangeItemInfo.internalBinaryWrite(
        message.from,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional objdiff.report.ChangeItemInfo to = 3; */
    if (message.to)
      ChangeItemInfo.internalBinaryWrite(
        message.to,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional objdiff.report.ReportItemMetadata metadata = 4; */
    if (message.metadata)
      ReportItemMetadata.internalBinaryWrite(
        message.metadata,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ChangeItem
 */
export const ChangeItem = new ChangeItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeItemInfo$Type extends MessageType<ChangeItemInfo> {
  constructor() {
    super('objdiff.report.ChangeItemInfo', [
      {
        no: 1,
        name: 'fuzzy_match_percent',
        kind: 'scalar',
        localName: 'fuzzy_match_percent',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: 'size',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<ChangeItemInfo>): ChangeItemInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.fuzzy_match_percent = 0;
    message.size = 0n;
    if (value !== undefined)
      reflectionMergePartial<ChangeItemInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangeItemInfo,
  ): ChangeItemInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* float fuzzy_match_percent */ 1:
          message.fuzzy_match_percent = reader.float();
          break;
        case /* uint64 size */ 2:
          message.size = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangeItemInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* float fuzzy_match_percent = 1; */
    if (message.fuzzy_match_percent !== 0)
      writer.tag(1, WireType.Bit32).float(message.fuzzy_match_percent);
    /* uint64 size = 2; */
    if (message.size !== 0n)
      writer.tag(2, WireType.Varint).uint64(message.size);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message objdiff.report.ChangeItemInfo
 */
export const ChangeItemInfo = new ChangeItemInfo$Type();
